{"version":3,"sources":["Header.js","Data.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","react","Data","Prem","team","rating","International","LaLiga","Results","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomTeam","state","select","Math","floor","random","length","setState","selectChange","e","newSelect","target","value","onChange","onClick","bind","Component","App","className","src_Header","src_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAWeA,SATA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,4GC2CGE,EAjDJ,CACPC,KAAM,CACF,CACIC,KAAM,kBACNC,OAAQ,GAEZ,CACID,KAAM,oBACNC,OAAQ,GAEZ,CACID,KAAM,UACNC,OAAQ,GAEZ,CACID,KAAM,QACNC,OAAQ,GAEZ,CACID,KAAM,UACNC,OAAQ,IAGhBC,cAAe,CACX,CACIF,KAAM,SACNC,OAAQ,GAEZ,CACID,KAAM,QACNC,OAAQ,GAEZ,CACID,KAAM,SACNC,OAAQ,GAEZ,CACID,KAAM,UACNC,OAAQ,IAGhBE,OAAQ,CACJ,CACIH,KAAM,YACNC,OAAQ,KCSLG,cAhDX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQJI,WAAa,WACT,IAAMZ,EAAOF,EAAKO,EAAKQ,MAAMC,QAAQC,KAAKC,MAAMD,KAAKE,SAAWnB,EAAKO,EAAKQ,MAAMC,QAAQI,SAASlB,KAC3FC,EAASH,EAAKO,EAAKQ,MAAMC,QAAQC,KAAKC,MAAMD,KAAKE,SAAWnB,EAAKO,EAAKQ,MAAMC,QAAQI,SAASjB,OACnGI,EAAKc,SAAS,CACVnB,KAAMA,EACNC,OAAQA,KAdHI,EAkBbe,aAAe,SAACC,GACZ,IAAIC,EAAYD,EAAEE,OAAOC,MACzBnB,EAAKc,SAAS,CACVL,OAAQQ,KAnBZjB,EAAKQ,MAAQ,CACTb,MAAM,EACNC,QAAQ,EACRa,QAAQ,GALHT,wEA2BT,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,UAAQ6B,SAAUjB,KAAKY,aAAcI,MAAOhB,KAAKK,MAAMC,QACnDpB,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,UAAQ4B,MAAM,QAAd,QACA9B,EAAAC,EAAAC,cAAA,UAAQ4B,MAAM,iBAAd,iBACA9B,EAAAC,EAAAC,cAAA,UAAQ4B,MAAM,UAAd,YAEJ9B,EAAAC,EAAAC,cAAA,SAAIY,KAAKK,MAAMC,OAAS,qBAAuBN,KAAKK,MAAMC,OAAS,KAEvEpB,EAAAC,EAAAC,cAAA,UAAQ8B,QAASlB,KAAKI,WAAWe,KAAKnB,OAAtC,aACAd,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,cAASY,KAAKK,MAAMb,KAAOQ,KAAKK,MAAMb,KAAO,uBACtDN,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,cAASY,KAAKK,MAAMZ,OAASO,KAAKK,MAAMZ,OAAS,+BA5CtD2B,aCaPC,mLATX,OACEnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,cALUJ,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3a012aff.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst Header = (props) => {\n    return(\n        <Fragment>\n            <h1>Welcome to the Fifa Generator</h1>\n            <p>Select a league and rating below and a random team will be chosen matching those parameters.</p>\n        </Fragment>\n    )\n}\n \nexport default Header;","let Data = {\n    Prem: [\n        {\n            team: 'Manchester City',\n            rating: 5\n        },\n        {\n            team: 'Manchester United',\n            rating: 5\n        },\n        {\n            team: 'Chelsea',\n            rating: 5\n        },\n        {\n            team: 'Spurs',\n            rating: 5\n        },\n        {\n            team: 'Arsenal',\n            rating: 5\n        }\n    ],\n    International: [\n        {\n            team: 'Brazil',\n            rating: 5\n        },\n        {\n            team: 'Spain',\n            rating: 5\n        },\n        {\n            team: 'France',\n            rating: 5\n        },\n        {\n            team: 'England',\n            rating: 5\n        }\n    ],\n    LaLiga: [\n        {\n            team: 'Barcelona',\n            rating: 5\n        }\n    ]\n};\n\nexport default Data;","import React, { Component } from 'react';\nimport Data from './Data';\n\nclass Results extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            team: false,\n            rating: false,\n            select: false\n        }\n    }\n\n    randomTeam = () => {\n        const team = Data[this.state.select][Math.floor(Math.random() * Data[this.state.select].length)].team;\n        const rating = Data[this.state.select][Math.floor(Math.random() * Data[this.state.select].length)].rating;\n        this.setState({\n            team: team,\n            rating: rating\n        });\n    }\n\n    selectChange = (e) => {\n        let newSelect = e.target.value;\n        this.setState({\n            select: newSelect\n        })\n    }\n\n    render(){\n        \n        return(\n            <div>\n                <div>\n                    <h2>Select league and rating</h2>\n                    <select onChange={this.selectChange} value={this.state.select}>\n                        <option></option>\n                        <option value=\"Prem\">Prem</option>\n                        <option value=\"International\">International</option>\n                        <option value=\"LaLiga\">La Liga</option>\n                    </select>\n                    <p>{this.state.select ? 'You have selected ' + this.state.select : ''}</p>\n                </div>\n                <button onClick={this.randomTeam.bind(this)} >Randomize</button>\n                <h2>Results...</h2> \n                <p>Team: <strong>{this.state.team ? this.state.team : 'No team generated.'}</strong></p>\n                <p>Rating: <strong>{this.state.rating ? this.state.rating : 'No team generated.'}</strong></p>\n            </div>\n        );\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Results from './Results';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Results />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}